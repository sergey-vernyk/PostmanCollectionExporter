name: release

on:
  workflow_run:
    workflows: [Application Tests]
    types: ["completed"]
    
jobs:
  details:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Collect New Package Details
    runs-on: ubuntu-latest
    outputs:
      package_name: ${{ steps.package_information.outputs.package_name }}
      new_version: ${{ steps.release.outputs.new_version }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4
      - name: Extract Tag And Details
        id: release
        run: |
          TAG_NAME="${{ github.event.workflow_run.head_branch }}"
          if [[ -z "$TAG_NAME" ]]; then
            echo "No tag found"
            exit 1
          fi

          NEW_VERSION=$(echo $TAG_NAME | awk -F'-' '{print $1}')
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
          echo "Version is $NEW_VERSION"
          echo "Tag name is $TAG_NAME"

      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Get Name Of Package
        id: package_information
        run: |
          pip install hatchling hatch-vcs

          PACKAGE_NAME=$(hatchling metadata name)
          echo "Package name: $PACKAGE_NAME"
          echo "package_name=$PACKAGE_NAME" >> "$GITHUB_OUTPUT"

  check_pypi:
    if: ${{ !failure()}}
    name: Check Package On PyPI
    needs: details
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt update && sudo apt install -y jq

      - name: Fetch Information From PyPI
        id: pypi-latest-package-version
        run: |
          PACKAGE_NAME=${{ needs.details.outputs.package_name }}
          response=$(curl -s ${{ vars.PYPI_BASE_URL }}/pypi/$PACKAGE_NAME/json || echo "{}")
          latest_previous_version=$(echo "$response" | jq -r '.releases | keys[]' | sort -rV | head -n 1)
          if [ -z "$latest_previous_version" ]; then
            echo "Package not found on PyPI."
            latest_previous_version="0.0.0"
          fi
          echo "Latest version on PyPI: $latest_previous_version"
          echo "latest_previous_version=$latest_previous_version" >> "$GITHUB_OUTPUT"

      - name: Compare Versions And Exit If Not Newer
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=${{ steps.pypi-latest-package-version.outputs.latest_previous_version }}
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than $LATEST_VERSION"
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on PyPI."
          fi

  setup_and_build:
    if: ${{ !failure()}}
    name: Setup And Build Package
    needs: details
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: ${{ github.event.workflow_run.head_branch }}

      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Source And Wheel Distribution
        run: |
          python3 -m pip install --upgrade build
          python3 -m build

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  pypi_publish:
    if: ${{ !failure()}}
    name: Upload Release To PyPI
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    environment:
      # from PyPi Trusted Publisher Management
      name: release
    permissions:
      # in order to use Trusted Publisher
      id-token: write
      contents: read

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish Distribution To PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github_release:
    if: ${{ !failure()}}
    name: Create GitHub Release
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Create GitHub Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ needs.details.outputs.tag_name }} dist/* --title ${{ needs.details.outputs.tag_name }} --generate-notes
